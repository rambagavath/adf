{
	"name": "Notebook 3",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/748050d4-50bc-479d-9bd7-fcaf44fa440c/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/bagssynapsews/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://bagssynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"df = (spark.read \\\r\n",
					"        .option('inferSchema', 'true') \\\r\n",
					"        .json('abfss://synapsefilesystem@bagssynapsestorageacc.dfs.core.windows.net/sampleJSON.json', multiLine=True)\r\n",
					"    )\r\n",
					"\r\n",
					"df.printSchema()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.functions import udf, explode\r\n",
					"\r\n",
					"flat=df.select('customerId',explode('items').alias('items_flat'))\r\n",
					"flat.show(100)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"topPurchases = (flat.select('customerId','items_flat.variantId','items_flat.quantity')\r\n",
					"    .orderBy('customerId'))\r\n",
					"\r\n",
					"topPurchases.show(100)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"# Let's order by the number of items purchased in the last 12 months\r\n",
					"#Ascending Order\r\n",
					"#sortedTopPurchases = topPurchases.orderBy(\"quantity\")\r\n",
					"#Descending Order\r\n",
					"sortedTopPurchases = (topPurchases.orderBy(f.col(\"quantity\").desc()))\r\n",
					"\r\n",
					"display(sortedTopPurchases.limit(100))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"\r\n",
					"a = sortedTopPurchases.select('customerId').groupBy('customerId').agg(f.count('*').alias('VariantCnt')).orderBy('customerId')\r\n",
					"a.show(100)\r\n",
					"\r\n",
					"display(dfCustomer.groupBy(\"address.country\",\"address.city\").count().orderBy(\"count\",  ascending=False).limit(10))"
				],
				"execution_count": 18
			}
		]
	}
}