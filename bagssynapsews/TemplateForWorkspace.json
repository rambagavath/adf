{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "bagssynapsews"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"MySql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySql1'"
		},
		"bagssynapsews-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'bagssynapsews-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bagssynapsestorageacc.dfs.core.windows.net"
		},
		"bagssynapsews-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bagssynapsestorageacc.dfs.core.windows.net"
		},
		"us-decennial-census-county_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'us-decennial-census-county'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/MySQL To BLOB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy City",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from city"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "City",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CityBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Country",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy City",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from Country"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Country",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CountryBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-16T20:01:42Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/City')]",
				"[concat(variables('workspaceId'), '/datasets/CityBlob')]",
				"[concat(variables('workspaceId'), '/datasets/Country')]",
				"[concat(variables('workspaceId'), '/datasets/CountryBlob')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/blob to table')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "df blob to table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df blob to table",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-16T20:17:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df blob to table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pipeline1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"filename": "card.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-05-07T20:52:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Country",
						"type": "nchar"
					},
					{
						"name": "city_count",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "city_Count"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/City')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`city`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MySql1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CityBlob')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "city.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "city_id",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "country_id",
						"type": "String"
					},
					{
						"name": "last_update",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CityCount')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "synapsefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`country`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MySql1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CountryBlob')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "country.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "country_id",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "last_update",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"fileSystem": "synapsefilesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Series_reference",
						"type": "String"
					},
					{
						"name": "Period",
						"type": "String"
					},
					{
						"name": "Data_value",
						"type": "String"
					},
					{
						"name": "Suppressed",
						"type": "String"
					},
					{
						"name": "STATUS",
						"type": "String"
					},
					{
						"name": "UNITS",
						"type": "String"
					},
					{
						"name": "Magnitude",
						"type": "String"
					},
					{
						"name": "Subject",
						"type": "String"
					},
					{
						"name": "Group",
						"type": "String"
					},
					{
						"name": "Series_title_1",
						"type": "String"
					},
					{
						"name": "Series_title_2",
						"type": "String"
					},
					{
						"name": "Series_title_3",
						"type": "String"
					},
					{
						"name": "Series_title_4",
						"type": "String"
					},
					{
						"name": "Series_title_5",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySql1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySql1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "mySQLintegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/mySQLintegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bagssynapsews-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('bagssynapsews-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bagssynapsews-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('bagssynapsews-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/us-decennial-census-county')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('us-decennial-census-county_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/integrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US 2",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": true
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mySQLintegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Agg Dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CityBlob",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "CountryBlob",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CityCount",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tcity_id as string,\n\t\tcity as string,\n\t\tcountry_id as string,\n\t\tlast_update as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['city.csv']) ~> source1\nsource(output(\n\t\tcountry_id as string,\n\t\tcountry as string,\n\t\tlast_update as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false) ~> source2\nsource1, source2 join(source1@country_id == source2@country_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 aggregate(groupBy(country),\n\tcity_count = count(city_id)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CityBlob')]",
				"[concat(variables('workspaceId'), '/datasets/CountryBlob')]",
				"[concat(variables('workspaceId'), '/datasets/CityCount')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df blob to table')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CityBlob",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "CountryBlob",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tcity_id as string,\n\t\tcity as string,\n\t\tcountry_id as string,\n\t\tlast_update as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['city.csv'],\n\tpartitionBy('hash', 1)) ~> source1\nsource(output(\n\t\tcountry_id as string,\n\t\tcountry as string,\n\t\tlast_update as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> source2\nsource1, source2 join(source1@country_id == source2@country_id,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> Join1\nJoin1 aggregate(groupBy(country),\n\tcity_count = count(city_id),\n\tpartitionBy('hash', 1)) ~> Aggregate1\nAggregate1 sink(input(\n\t\tCountry as string,\n\t\tcity_count as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCountry = country,\n\t\tcity_count\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CityBlob')]",
				"[concat(variables('workspaceId'), '/datasets/CountryBlob')]",
				"[concat(variables('workspaceId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"1e30d5d0-c5a9-4778-855e-9babdbcdd630": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "887.3",
												"STATUS": "F",
												"Period": "2007.01",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "843.9",
												"STATUS": "F",
												"Period": "2007.02",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "925.1",
												"STATUS": "F",
												"Period": "2007.03",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "880",
												"STATUS": "F",
												"Period": "2007.04",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "905.1",
												"STATUS": "F",
												"Period": "2007.05",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "874.3",
												"STATUS": "F",
												"Period": "2007.06",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "890.5",
												"STATUS": "F",
												"Period": "2007.07",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "917.7",
												"STATUS": "F",
												"Period": "2007.08",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "895.9",
												"STATUS": "F",
												"Period": "2007.09",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											},
											{
												"UNITS": "Dollars",
												"Series_title_2": "Supermarket and grocery stores",
												"Subject": "Electronic Card Transactions (ANZSIC06) - ECT",
												"Series_reference": "ECTM.S1AG1210",
												"Data_value": "945.9",
												"STATUS": "F",
												"Period": "2007.1",
												"Group": "Private - Values - Electronic card transactions  A/S/T by industry",
												"Magnitude": "6",
												"Series_title_1": "Actual"
											}
										],
										"schema": {
											"Series_reference": "string",
											"Period": "string",
											"Data_value": "string",
											"Suppressed": "string",
											"STATUS": "string",
											"UNITS": "string",
											"Magnitude": "string",
											"Subject": "string",
											"Group": "string",
											"Series_title_1": "string",
											"Series_title_2": "string",
											"Series_title_3": "string",
											"Series_title_4": "string",
											"Series_title_5": "string"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"Series_reference"
											],
											"seriesFieldKeys": [
												"Series_reference"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/748050d4-50bc-479d-9bd7-fcaf44fa440c/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/bagssynapsews/bigDataPools/sparkpool",
						"name": "sparkpool",
						"type": "Spark",
						"endpoint": "https://bagssynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://synapsefilesystem@bagssynapsestorageacc.dfs.core.windows.net/card.csv', format='csv'\r\n",
							"## If header exists uncomment line below\r\n",
							", header=True\r\n",
							")\r\n",
							"#display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"# pyspark dataframe cannot talk to scala dataframe. So create a table and then use the table to copy the data into scala_df.Two options to create a table.\r\n",
							"\r\n",
							"#Option-1\r\n",
							"#python dataframe to spark table\r\n",
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS cards\")\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"cards.transactions_python_opt1\")\r\n",
							"\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#Option-2\r\n",
							"#python dataframe to spark table\r\n",
							"df.createOrReplaceTempView(\"transactions_python_opt2\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#Spark table to dataframe\r\n",
							"\r\n",
							"pythondf = sqlContext.table(\"cards.transactions_python_opt1\")\r\n",
							"\r\n",
							"display(pythondf.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"/*Spark table to dataframe*/\r\n",
							"val scala_df = spark.sqlContext.sql (\"select * from transactions_python_opt2\")\r\n",
							"\r\n",
							"scala_df.write.synapsesql(\"DediPool.dbo.PySparkTable1\", Constants.INTERNAL)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"/*Scala dataframe to Spark table*/\r\n",
							"\r\n",
							"scala_df.createTempView(\"transactions_scala_opt1\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"spark.sqlContext.sql (\"select * from transactions_scala_opt1\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"2aaa78ef-b40b-4eb8-9c2f-280410816a73": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 123,
												"minAge": 5,
												"year": 2010,
												"sex": "Male",
												"race": "WHITE ALONE",
												"maxAge": 9
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 1,
												"minAge": 67,
												"year": 2010,
												"sex": "Female",
												"race": "ASIAN ALONE",
												"maxAge": 69
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 111,
												"minAge": 55,
												"year": 2010,
												"sex": "Female",
												"race": "WHITE ALONE",
												"maxAge": 59
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 64,
												"year": 2010,
												"race": "TWO OR MORE RACES"
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 18,
												"minAge": 85,
												"year": 2010,
												"sex": "Male"
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 16,
												"year": 2010,
												"sex": "Female",
												"race": "AMERICAN INDIAN AND ALASKA NATIVE ALONE"
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 7,
												"minAge": 21,
												"year": 2010,
												"sex": "Male",
												"race": "WHITE ALONE",
												"maxAge": 21
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 45,
												"minAge": 85,
												"year": 2010,
												"sex": "Female"
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 0,
												"minAge": 67,
												"year": 2010,
												"sex": "Female",
												"race": "NATIVE HAWAIIAN AND OTHER PACIFIC ISLANDER ALONE",
												"maxAge": 69
											},
											{
												"decennialTime": "2010",
												"stateName": "Texas",
												"countyName": "Crockett County",
												"population": 4,
												"minAge": 67,
												"year": 2010,
												"sex": "Male",
												"race": "SOME OTHER RACE ALONE",
												"maxAge": 69
											}
										],
										"schema": {
											"decennialTime": "string",
											"stateName": "string",
											"countyName": "string",
											"population": "int",
											"race": "string",
											"sex": "string",
											"minAge": "int",
											"maxAge": "int",
											"year": "int"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"decennialTime"
											],
											"seriesFieldKeys": [
												"population"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/748050d4-50bc-479d-9bd7-fcaf44fa440c/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/bagssynapsews/bigDataPools/sparkpool",
						"name": "sparkpool",
						"type": "Spark",
						"endpoint": "https://bagssynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from azureml.opendatasets import UsPopulationCounty\n",
							"\n",
							"data = UsPopulationCounty()\n",
							"df = data.to_spark_dataframe()\n",
							"# Display 10 rows\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"type(df)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/748050d4-50bc-479d-9bd7-fcaf44fa440c/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/bagssynapsews/bigDataPools/sparkpool",
						"name": "sparkpool",
						"type": "Spark",
						"endpoint": "https://bagssynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option('inferSchema', 'true') \\\r\n",
							"        .json('abfss://synapsefilesystem@bagssynapsestorageacc.dfs.core.windows.net/sampleJSON.json', multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('customerId',explode('items').alias('items_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"topPurchases = (flat.select('customerId','items_flat.variantId','items_flat.quantity')\r\n",
							"    .orderBy('customerId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"#Ascending Order\r\n",
							"#sortedTopPurchases = topPurchases.orderBy(\"quantity\")\r\n",
							"#Descending Order\r\n",
							"sortedTopPurchases = (topPurchases.orderBy(f.col(\"quantity\").desc()))\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql import functions as f\r\n",
							"\r\n",
							"a = sortedTopPurchases.select('customerId').groupBy('customerId').agg(f.count('*').alias('VariantCnt')).orderBy('customerId')\r\n",
							"a.show(100)\r\n",
							"\r\n",
							"display(dfCustomer.groupBy(\"address.country\",\"address.city\").count().orderBy(\"count\",  ascending=False).limit(10))"
						],
						"outputs": [],
						"execution_count": 18
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DediPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"preventDataExfiltration": false
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"metadata": {
						"language": "sql"
					}
				}
			},
			"dependsOn": []
		}
	]
}